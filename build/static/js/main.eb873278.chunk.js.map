{"version":3,"sources":["logo.png","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","App","Component","componentWillMount","loadWeb3","loadBlockchainData","window","ethereum","web3","Web3","enable","currentProvider","alert","eth","getAccounts","accounts","setState","account","net","getId","networkId","networkData","Color","networks","abi","address","contract","Contract","methods","totalSupply","call","i","colors","color","state","constructor","props","super","mint","this","awardItem","send","from","once","receipt","render","className","href","target","rel","id","role","onSubmit","event","preventDefault","value","type","placeholder","ref","input","map","key","style","backgroundColor","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mTAAAA,EAAOC,QAAU,IAA0B,kC,+KCM3C,MAAMC,UAAYC,YAGVC,qBAAsB,IAAD,kIACnB,EAAKC,WADc,uBAEnB,EAAKC,qBAFc,6CAMrBD,WAAY,OAAD,wGACXE,OAAOC,SADI,uBAEbD,OAAOE,KAAO,IAAIC,IAAKH,OAAOC,UAFjB,SAGPD,OAAOC,SAASG,SAHT,6BAKNJ,OAAOE,KACdF,OAAOE,KAAO,IAAIC,IAAKH,OAAOE,KAAKG,iBAGnCL,OAAOM,MAAM,sEATA,6CAaXP,qBAAsB,IAAD,iJACnBG,EAAOF,OAAOE,KADK,SAGFA,EAAKK,IAAIC,cAHP,cAGnBC,EAHmB,OAIzB,EAAKC,SAAS,CAACC,QAASF,EAAS,KAJR,SAOFP,EAAKK,IAAIK,IAAIC,QAPX,UAOnBC,EAPmB,SASnBC,EAAcC,EAAMC,SAASH,IATV,wBAWjBI,EAAMF,EAAME,IACZC,EAAUJ,EAAYI,QACtBC,EAAW,IAAIlB,EAAKK,IAAIc,SAASH,EAAIC,GAC3C,EAAKT,SAAS,CAAEU,aAdO,UAgBGA,EAASE,QAAQC,cAAcC,OAhBlC,QAgBjBD,EAhBiB,OAiBvB,EAAKb,SAAS,CAAEa,gBAEPE,EAAE,EAnBY,aAmBTA,GAAIF,GAnBK,kCAoBDH,EAASE,QAAQI,OAAOD,EAAE,GAAGD,OApB5B,QAoBfG,EApBe,OAqBrB,EAAKjB,SAAS,CACZgB,OAAQ,IAAI,EAAKE,MAAMF,OAAQC,KAtBZ,QAmBQF,IAnBR,gDA0BvBzB,OAAOM,MAAM,mDA1BU,8CA0C3BuB,YAAYC,GACVC,MAAMD,GADU,KAVpBE,KAAQL,IAENM,KAAKL,MAAMR,SAASE,QAAQY,UAAUP,GAAOQ,KAAK,CAACC,KAAMH,KAAKL,MAAMjB,UACnE0B,KAAK,UAAYC,IAChBL,KAAKvB,SAAS,CACZgB,OAAQ,IAAIO,KAAKL,MAAMF,OAAQC,QAOjCM,KAAKL,MAAQ,CACXjB,QAAS,GACTS,SAAU,KACVG,YAAa,EACbG,OAAQ,IAIZa,SACE,OACE,6BACE,yBAAKC,UAAU,kEACb,uBACEA,UAAU,sCACVC,KAAK,yCACLC,OAAO,SACPC,IAAI,uBAJN,6DASA,wBAAIH,UAAU,mBACZ,wBAAIA,UAAU,oDAAd,sEAEE,2BAAOA,UAAU,cAAa,0BAAMI,GAAG,WAAWX,KAAKL,MAAMjB,aAInE,yBAAK6B,UAAU,wBACb,yBAAKA,UAAU,OACb,0BAAMK,KAAK,OAAOL,UAAU,gCAC1B,yBAAKA,UAAU,2BACb,2CACA,0BAAMM,SAAWC,IACfA,EAAMC,iBACN,MAAMrB,EAAQM,KAAKN,MAAMsB,MACzBhB,KAAKD,KAAKL,KAEZ,2BACAuB,KAAO,OACPV,UAAY,oBACZW,YAAc,eACdC,IAAQC,IAAWpB,KAAKN,MAAQ0B,KAEhC,2BACAH,KAAO,SACPV,UAAY,4BACZS,MAAQ,aAMd,6BACA,yBAAKT,UAAU,mBACdP,KAAKL,MAAMF,OAAO4B,IAAI,CAAC3B,EAAM4B,IAE1B,yBAAKA,IAAKA,EAAKf,UAAU,iBAAzB,wDACE,yBAAKA,UAAU,QACfgB,MAAQ,CAAEC,gBAAiB9B,KAC3B,6BAAMA,SAWPhC,QCnIK+D,QACW,cAA7B1D,OAAO2D,SAASC,UAEe,UAA7B5D,OAAO2D,SAASC,UAEhB5D,OAAO2D,SAASC,SAASC,MACvB,2DCZNC,IAASvB,OAAO,kBAAC,EAAD,MAASwB,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAKC,IACjCA,EAAaC,gB","file":"static/js/main.eb873278.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.06825633.png\";","import React, { Component } from 'react';//load react component\nimport Web3 from 'web3';//load web3\nimport logo from '../logo.png';\nimport './App.css';\nimport Color from '../abis/Color.json';//load Color abis(blockchaindata)\n\nclass App extends Component {\n\n//load the component every time it successfully loads up to the dom(the mark-up of the webiste)\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n//load the metamask\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser deteced. You should consider trying MetaMask!')\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    //load account, fetch the account address and store it in our application\n    const accounts = await web3.eth.getAccounts()\n    this.setState({account: accounts[0]})\n\n//get the network ID to fetch the correct contract address\n    const networkId= await web3.eth.net.getId()\n    //through the network ID, get the right data of the contract deployed on blockchain\n    const networkData = Color.networks[networkId]\n    if (networkData){\n      const abi = Color.abi\n      const address = networkData.address\n      const contract = new web3.eth.Contract(abi,address)\n      this.setState({ contract })\n      //get the information of the totalsupply\n      const totalSupply = await contract.methods.totalSupply().call()\n      this.setState({ totalSupply })\n      //load Colors\n      for (var i=1; i<= totalSupply; i++){\n        const color = await contract.methods.colors(i-1).call()\n        this.setState({\n          colors: [...this.state.colors, color]//add new color the old colors array\n        })\n      }\n    } else {\n      window.alert('Smart contract not deployed to detected network')\n    }\n  }\n\n//create the mint function on react.js to mint new color and put it on the blockchain\n//which means creating new transactions on the blockchain\nmint = (color) => {\n  //send new color to the blockchain\n  this.state.contract.methods.awardItem(color).send({from: this.state.account})\n  .once('receipt', (receipt) => {\n    this.setState({\n      colors: [...this.state.colors, color]\n    })\n  })\n}\n\n  constructor(props){\n    super(props)\n    this.state = {\n      account: '',\n      contract: null,\n      totalSupply: 0,\n      colors: [],\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n          <a\n            className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n            href=\"http://www.dappuniversity.com/bootcamp\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n          //Main name of the webapp (on the top right)\n            Color Tokens\n          </a>\n          <ul className=\"navbar-nav px-3\">\n            <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\n            //where the account address shows up(on the top left of the webapp)\n              <small className=\"text-white\"><span id=\"account\">{this.state.account}</span></small>\n            </li>\n          </ul>\n        </nav>\n        <div className=\"container-fluid mt-5\">\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\n              <div className=\"content mr-auto ml-auto\">\n                <h1>Issue Token</h1>\n                <form onSubmit={(event) => {\n                  event.preventDefault()\n                  const color = this.color.value\n                  this.mint(color) //create new mint function that calls the smart contract to mint the color\n                }}>\n                <input\n                type = 'text'\n                className = 'form-control mb-1'\n                placeholder = 'e.g. #FFFFFF'\n                ref = {(input) => {this.color = input}} //keep track of the color we input each time\n                />\n                <input\n                type = 'submit'\n                className = 'btn btn-block btn-primary'\n                value = 'MINT'\n                />\n                </form>\n              </div>\n            </main>\n          </div>\n          <hr/>\n          <div className=\"row text-center\">\n          {this.state.colors.map((color,key)=>{\n            return(\n              <div key={key} className=\"col-md-3 mb-3\">//ClassName is the format of the listed color numbers\n                <div className=\"token\" //the style of the color token we set in the App.css\n                style ={{ backgroundColor: color}}></div>\n                <div>{color}</div>\n              </div>\n              )\n          })}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}